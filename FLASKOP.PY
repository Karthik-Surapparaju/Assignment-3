{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "1fa5c72a-7134-4af2-b0d2-a6c38618a225",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Flask server running at http://127.0.0.1:5000\n",
      " * Serving Flask app '__main__'\n",
      " * Debug mode: off\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.\n",
      " * Running on all addresses (0.0.0.0)\n",
      " * Running on http://127.0.0.1:5000\n",
      " * Running on http://192.168.2.34:5000\n",
      "Press CTRL+C to quit\n"
     ]
    }
   ],
   "source": [
    "from flask import Flask, request, jsonify\n",
    "from flask_sqlalchemy import SQLAlchemy\n",
    "from datetime import datetime\n",
    "import threading\n",
    "\n",
    "app = Flask(__name__)\n",
    "app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///students.db'\n",
    "app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False\n",
    "db = SQLAlchemy(app)\n",
    "\n",
    "class Student(db.Model):\n",
    "    student_id = db.Column(db.Integer, primary_key=True)\n",
    "    first_name = db.Column(db.String(50), nullable=False)\n",
    "    last_name = db.Column(db.String(50), nullable=False)\n",
    "    dob = db.Column(db.Date, nullable=False)\n",
    "    amount_due = db.Column(db.Float, nullable=False)\n",
    "\n",
    "    def to_dict(self):\n",
    "        return {\n",
    "            'student_id': self.student_id,\n",
    "            'first_name': self.first_name,\n",
    "            'last_name': self.last_name,\n",
    "            'dob': self.dob.isoformat(),\n",
    "            'amount_due': self.amount_due\n",
    "        }\n",
    "\n",
    "with app.app_context():\n",
    "    db.create_all()\n",
    "\n",
    "@app.route('/students', methods=['POST'])\n",
    "def create_student():\n",
    "    data = request.get_json()\n",
    "    try:\n",
    "        new_student = Student(\n",
    "            first_name=data['first_name'],\n",
    "            last_name=data['last_name'],\n",
    "            dob=datetime.strptime(data['dob'], '%Y-%m-%d').date(),\n",
    "            amount_due=float(data['amount_due'])\n",
    "        )\n",
    "        db.session.add(new_student)\n",
    "        db.session.commit()\n",
    "        return jsonify(new_student.to_dict()), 201\n",
    "    except Exception as e:\n",
    "        return jsonify({'error': str(e)}), 400\n",
    "\n",
    "@app.route('/students', methods=['GET'])\n",
    "def get_all_students():\n",
    "    students = Student.query.all()\n",
    "    return jsonify([student.to_dict() for student in students])\n",
    "\n",
    "@app.route('/students/<int:student_id>', methods=['GET'])\n",
    "def get_student(student_id):\n",
    "    student = Student.query.get(student_id)\n",
    "    if student:\n",
    "        return jsonify(student.to_dict())\n",
    "    return jsonify({'error': 'Student not found'}), 404\n",
    "\n",
    "@app.route('/students/<int:student_id>', methods=['PUT'])\n",
    "def update_student(student_id):\n",
    "    student = Student.query.get(student_id)\n",
    "    if not student:\n",
    "        return jsonify({'error': 'Student not found'}), 404\n",
    "    data = request.get_json()\n",
    "    try:\n",
    "        if 'first_name' in data:\n",
    "            student.first_name = data['first_name']\n",
    "        if 'last_name' in data:\n",
    "            student.last_name = data['last_name']\n",
    "        if 'dob' in data:\n",
    "            student.dob = datetime.strptime(data['dob'], '%Y-%m-%d').date()\n",
    "        if 'amount_due' in data:\n",
    "            student.amount_due = float(data['amount_due'])\n",
    "        db.session.commit()\n",
    "        return jsonify(student.to_dict())\n",
    "    except Exception as e:\n",
    "        return jsonify({'error': str(e)}), 400\n",
    "\n",
    "@app.route('/students/<int:student_id>', methods=['DELETE'])\n",
    "def delete_student(student_id):\n",
    "    student = Student.query.get(student_id)\n",
    "    if not student:\n",
    "        return jsonify({'error': 'Student not found'}), 404\n",
    "    db.session.delete(student)\n",
    "    db.session.commit()\n",
    "    return jsonify({'message': 'Student deleted successfully'}), 200\n",
    "\n",
    "def run_flask():\n",
    "    app.run(host='0.0.0.0', port=5000, use_reloader=False)\n",
    "\n",
    "flask_thread = threading.Thread(target=run_flask)\n",
    "flask_thread.daemon = True\n",
    "flask_thread.start()\n",
    "\n",
    "print(\"Flask server running at http://127.0.0.1:5000\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "422f47e3-7eb5-42a5-a17f-9a1e2ece5095",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3c47cfaf-11e5-4634-b132-505efede0716",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
